{
  "metadata": {
    "version": 1,
    "disable_limits": false
  },
  "nodes": [
    {
      "node_id": "84a86108-81cb-49f5-95a6-78278c199cb4",
      "type": "SOURCE",
      "operator": "sagemaker.redshift_source_0.1",
      "parameters": {
        "dataset_definition": {
          "datasetSourceType": "Redshift",
          "name": "dm-data",
          "clusterIdentifier": "bankdm",
          "database": "bankdm",
          "dbUser": "bankdm",
          "queryString": "SELECT * FROM( select * from dm.data )",
          "unloadIamRole": "arn:aws:iam::138604873012:role/BankDM-RedShift",
          "s3OutputLocation": "s3://sagemaker-ap-southeast-1-138604873012/redshift/",
          "outputFormat": "parquet"
        }
      },
      "trained_parameters": {
        "query_execution_id": "274415d0-a555-4241-b993-3e9b3f79f924",
        "unload_s3_output_location": "s3://sagemaker-ap-southeast-1-138604873012/redshift/d50e0d14dbf24bf38f5695c95d4385f2/data/"
      },
      "inputs": [],
      "outputs": [
        {
          "name": "default",
          "sampling": {
            "sampling_method": "sample_by_limit",
            "limit_rows": 50000
          }
        }
      ]
    },
    {
      "node_id": "c732a891-3d48-46d5-9f24-8ce3cd7db0e7",
      "type": "TRANSFORM",
      "operator": "sagemaker.spark.infer_and_cast_type_0.1",
      "parameters": {},
      "trained_parameters": {
        "schema": {
          "job": "string",
          "marital": "string",
          "education": "string",
          "defaulted": "string",
          "housing": "string",
          "loan": "string",
          "contact": "string",
          "month": "string",
          "day_of_week": "string",
          "poutcome": "string",
          "y": "string",
          "age": "long",
          "duration": "long",
          "campaign": "long",
          "pdays": "long",
          "previous": "long",
          "emp_var_rate": "float",
          "cons_price_idx": "float",
          "cons_conf_idx": "float",
          "euribor3m": "float",
          "nr_employed": "long"
        }
      },
      "inputs": [
        {
          "name": "default",
          "node_id": "84a86108-81cb-49f5-95a6-78278c199cb4",
          "output_name": "default"
        }
      ],
      "outputs": [
        {
          "name": "default"
        }
      ]
    },
    {
      "node_id": "2bc11a05-1ac5-4859-ab90-0b1a07d4dac5",
      "type": "VISUALIZATION",
      "operator": "sagemaker.visualizations.describe_0.1",
      "parameters": {
        "name": "Summary"
      },
      "inputs": [
        {
          "name": "df",
          "node_id": "c732a891-3d48-46d5-9f24-8ce3cd7db0e7",
          "output_name": "default"
        }
      ],
      "outputs": [
        {
          "name": "default"
        }
      ]
    },
    {
      "node_id": "13dae5f1-be2a-4868-8025-37cba6d364d3",
      "type": "VISUALIZATION",
      "operator": "sagemaker.visualizations.histogram_0.1",
      "parameters": {
        "name": "Age",
        "x_axis": "age",
        "color_by": "y"
      },
      "inputs": [
        {
          "name": "df",
          "node_id": "c732a891-3d48-46d5-9f24-8ce3cd7db0e7",
          "output_name": "default"
        }
      ],
      "outputs": [
        {
          "name": "default"
        }
      ]
    },
    {
      "node_id": "30607934-128a-46a4-81a3-d08063f6a205",
      "type": "TRANSFORM",
      "operator": "sagemaker.spark.custom_pandas_0.1",
      "parameters": {
        "code": "import time\nimport pandas as pd\n\n# Change the value . into _\ndf = df.replace(regex=r'\\.', value='_')\ndf = df.replace(regex=r'\\_$', value='')\n\n# Add two new indicators\ndf[\"no_previous_contact\"] = (df[\"pdays\"] == 999).astype(int)\ndf[\"not_working\"] = df[\"job\"].isin([\"student\", \"retired\", \"unemployed\"]).astype(int)\n\n# Add unique ID and event time for features store\ndf['FS_ID'] = df.index + 1000\ncurrent_time_sec = int(round(time.time()))\ndf['FS_time'] = pd.Series([current_time_sec]*len(df), dtype=\"float64\")\n"
      },
      "inputs": [
        {
          "name": "df",
          "node_id": "c732a891-3d48-46d5-9f24-8ce3cd7db0e7",
          "output_name": "default"
        }
      ],
      "outputs": [
        {
          "name": "default"
        }
      ]
    },
    {
      "node_id": "7923e1bc-1bb5-4421-88d1-74e206221f16",
      "type": "TRANSFORM",
      "operator": "sagemaker.spark.manage_columns_0.1",
      "parameters": {
        "operator": "Drop column",
        "drop_column_parameters": {
          "column_to_drop": "duration"
        }
      },
      "inputs": [
        {
          "name": "df",
          "node_id": "30607934-128a-46a4-81a3-d08063f6a205",
          "output_name": "default"
        }
      ],
      "outputs": [
        {
          "name": "default"
        }
      ]
    },
    {
      "node_id": "3537c7c2-c94a-4e40-9959-da00594d9433",
      "type": "TRANSFORM",
      "operator": "sagemaker.spark.manage_columns_0.1",
      "parameters": {
        "operator": "Drop column",
        "drop_column_parameters": {
          "column_to_drop": "emp_var_rate"
        }
      },
      "inputs": [
        {
          "name": "df",
          "node_id": "7923e1bc-1bb5-4421-88d1-74e206221f16",
          "output_name": "default"
        }
      ],
      "outputs": [
        {
          "name": "default"
        }
      ]
    },
    {
      "node_id": "83f9f6a6-1fa8-4f98-b244-c53b9e6e7353",
      "type": "TRANSFORM",
      "operator": "sagemaker.spark.manage_columns_0.1",
      "parameters": {
        "operator": "Drop column",
        "drop_column_parameters": {
          "column_to_drop": "cons_price_idx"
        }
      },
      "inputs": [
        {
          "name": "df",
          "node_id": "3537c7c2-c94a-4e40-9959-da00594d9433",
          "output_name": "default"
        }
      ],
      "outputs": [
        {
          "name": "default"
        }
      ]
    },
    {
      "node_id": "eeeef466-52dc-4ede-af6b-d0e6ed974556",
      "type": "TRANSFORM",
      "operator": "sagemaker.spark.manage_columns_0.1",
      "parameters": {
        "operator": "Drop column",
        "drop_column_parameters": {
          "column_to_drop": "cons_conf_idx"
        }
      },
      "inputs": [
        {
          "name": "df",
          "node_id": "83f9f6a6-1fa8-4f98-b244-c53b9e6e7353",
          "output_name": "default"
        }
      ],
      "outputs": [
        {
          "name": "default"
        }
      ]
    },
    {
      "node_id": "476f6f43-d9d7-4c5b-af71-33b14ad6cace",
      "type": "TRANSFORM",
      "operator": "sagemaker.spark.manage_columns_0.1",
      "parameters": {
        "operator": "Drop column",
        "drop_column_parameters": {
          "column_to_drop": "euribor3m"
        }
      },
      "inputs": [
        {
          "name": "df",
          "node_id": "eeeef466-52dc-4ede-af6b-d0e6ed974556",
          "output_name": "default"
        }
      ],
      "outputs": [
        {
          "name": "default"
        }
      ]
    },
    {
      "node_id": "501b1b46-5dfb-4326-b0f7-114a870a567d",
      "type": "TRANSFORM",
      "operator": "sagemaker.spark.manage_columns_0.1",
      "parameters": {
        "operator": "Drop column",
        "drop_column_parameters": {
          "column_to_drop": "nr_employed"
        }
      },
      "inputs": [
        {
          "name": "df",
          "node_id": "476f6f43-d9d7-4c5b-af71-33b14ad6cace",
          "output_name": "default"
        }
      ],
      "outputs": [
        {
          "name": "default"
        }
      ]
    },
    {
      "node_id": "9277bc45-3ea7-4da8-8596-11d498a69c1d",
      "type": "TRANSFORM",
      "operator": "sagemaker.spark.encode_categorical_0.1",
      "parameters": {
        "operator": "One-hot encode",
        "one_hot_encode_parameters": {
          "invalid_handling_strategy": "Keep",
          "drop_last": false,
          "output_style": "Columns",
          "input_column": "job",
          "output_column": "job"
        },
        "ordinal_encode_parameters": {
          "invalid_handling_strategy": "Replace with NaN",
          "input_column": "job"
        }
      },
      "trained_parameters": {
        "one_hot_encode_parameters": {
          "_hash": -1767228197713558300,
          "string_indexer_model": "P)h>@6aWAK2mp5uN>ltAA;;VR003bD000vJ003=ebYWy+bYU-WVRCdWFfcGMFm;a0PQx$|MfZHhtW(R8AuZj)ri%(B5Zh>KPuftw7~6<a<=-(uLPDb3JNKMBXV4Z?f;9x*3yi1_BvM2^3TMSYm<yA5$~^l0#vA$|-UdS!8pxxgl+i_4x1CZeC71H%wp%qY^Do3{48EF`kU}odefov0Tp3Lb|0sKs9V&CZTejHNO6AdQv6{~iN{%Jp1zVv^F7`TnuOHAGOB?@=cJ>{KVvR@tTYe2Ym>MuNV6pk}g7WeoegD(@XN;Hw*F4Se0~_M!Q>1zsnBEF`eY&TlVVbVK08mQ<1QY-O00;ng4oXv5GkhZs0000C0000O0001OWprU=VRT_HE^uLTbS*G2FfcGKV{&6lE=p!#U|?c6t|;{f08mQ<1QY-O00;ng4oXw{jutlX0RR9M0{{R>0001FVRT_HaA9(EEif=JFfc7<W->4_G&W-`VKp!|Ei^edHZ3?YV=ygYGGSq1H(@t7W@I!iV=yo<E^}^SaBz7paA9(Bb!BvoQ_X7IKoDLl@lP9<p4Ld9gAq6+U<<o)RNM5DTj`;M(nFz?veu65C99RQyGk&@@6jhHCFDK&3O)51`UoA_N}K*cPdnfD&CJd>%buOS8c{;OIP|O2r!IyK+VEp?)GXAw%CD4LXFL;%5OQ0a)bXf)y15|^25!Cf_}hoAdVp{)3m7E1luSQFXdziDkqD+*hz#gUk$@?cj48H&43upm(qM%K-o_9a4J!=_3jJtXB+~(8E19o>KR{xc7X~sWc-f{<cT(BL*n(FbtHG(`$>(jeV*32ONtReg9dhEh2a?S}np3UWnmV*WPWIh>DU998O_1B!ewS#w_fzZ<(s4ZB^AB4-ZF@b^@ZQ|-yDhp){smB{<90sob#C_#ThIQoX3xhbAhg_XndT6$@4C5OglxsoM7Z@6UV=6v$D$}4hC|{W|B+!XWQf5<0XEe6RhWTgoLT06u3ZOqy@FsC7^{oK2K^uvAh`)<Z?6NzvQoO|1@&G2k2+S-m8IAJp_X?EwLm(_m1RPimxYwU3@3oiKS+gu%_Z!JesE_2@7iqMZHW7#GC0U|x7tW|6pn`BsCzUogyh{}I_2p&;*h5E$t2}Z(@7l1JdWb&Xfl2hMZ<I)&-wJ&^L^ZSglj*;5AhvPO9KQH000080Cx^bQ{$S`S`q*N01yBG08Ib@0AyiwVJ|LlVRCdWFfcGMFfC?gGB7bTHe)SeH83_UG&wgmEjTe_FfCy+VPRo6VK+BsWHc>fFfcGKb8ca9aCt6pVRCVGWpplMa$`#_N@ieSU}EU0k9|;cyTlIwP)h*<6ay3h000O8cMeKZ{2C$0+yDRoVF3UD6951J0000000000q=5hc003=ebYWy+bYU-WVRCdWFfcGMFi=YY0u%!j000080Cx^bQ&}^7BMtxn01N;C02lxO00000000000HlEp0RRAPWprU=VRT_HE^uLTbS*G2FfcGKV{&6qO928D0~7!N00;ng4oXw{jutlX0RR9M0{{R>00000000000001_fl&bf0AyiwVJ~oDa&#>)FfcGMEoNpiFflYXV=ZAdFg7hTIX5;fI5A@|EnzZYVPQ96H#cTvG%aH=FfcB2Zeeh6c`k5aa&dKKbWlqH0u%!j000080Cx^bQ{$S`S`q*N01yBG08Ib@00000000000HlGZ0{{SIVRT_HE^uLTbS*G2FfcGJW@a)lF*G(~Enzh<HZ3$cH#RLeF=H?-VKQN1VK-qnH)dosEn_e+FfMa$VQ_GHE^uLTadl;ME@N_IP)h{{000001ONm8cmV(aBm@8e000",
          "one_hot_encoder_model": "P)h>@6aWAK2mp5uN>hpnfKt`~003zL000vJ003=ebYWy+bYU-WVRCdWFfcGMFm;Z*P6IIzMSDKObz*t5dBC;^2_zz@XswZVHd*19#$yVi{dXpbf|4T56i4@-I|t=Fl%hJ7Xs02A+oLWS=vxP`2L!H!`Xl0N;+N=BkF=HJ)lBgiurP$Ix@O(BkFD95b+cN`)T#f4RK^s=+-jrE9Kvs$8|l@t7kHzz%VF6(Z5AtMnnohhhp+`PAJiCg<>%z3!x*x4={TM$|6_aM_Nd=O>^;84AMmFkBuXT_r<C8Ju<8cz1t%dmK=u52HFmAN|Dm<#+>Mo~;=T20diVoSO9KQH000080Cx^bQv-m}sSW@D01N;C02lxO0BvP-VPs)+VJ|LlVRCdWFfcGMFfL<qV@obdW?*1oVhC#B>;eE#O9KQH000080Cx^bQ(XrKVtxSt05Ado07w7;0AyiwVJ~oDa&#>)FfcGMEj2bdHZ?LgWG!McW@9ZhH840WVPZEqEn;M5V>dW5H)Jp}W-VhdFfcB2Zeeh6c`k5aa&dKKbbV4yODi!HO=Dkmp$iuoGBAr0uqcdS=1m=^#f9!fL`2<*NZLt!!^_OnBvq;w{2Bg0e~7oXiXxc6<$j!V@3|qT2WK%sgpp22FgPvJ3TSf;AvCuh+WZp1S>MNCm*9fMXqF||KR#TwBVqnu+u=W13WCuNrfWmt<V|fR=f#7x(7uIsnzX44>i|IT2BOPS%TiVjdDsv9ptBM{vklbpv+v}0(g&De4|`AEbEC7e_ls6PfPG-htn%bx<cE~j=7x)r0FnG%FTaz<7Ij7cBs}5~qFX-@_EvLnZpYGbQ{VGaI*|(}=u6{~xyeYfKC{k@hmM6z6;kJx^)DY;CCXXp+ZuqFGd`KZ7%_qLVzrBTwy1z44djP)<wQ~0ld;yUuY|U88nOx^G0*^o!7^kYnxOG?dNoD#XrXw!H0{NT?U=_AkK3DraiQ~eq<XpPCb?8<kYy_0Rau&*d77lXIP3mRl1O#aLEhW)g8*LewSmwn{FOIQO9KQH000080Cx^bQ*g3YY!Uzf01yBG08Ib@0AyiwVJ|LlVRCdWFfcGMFfBDUIW{#iH)JhhGG=2fG&L|dEn#9eIW1yjW@9%vGB;!}GG;AfFfcGKb8ca9aCt6pVRCVGWpplMa$`#_N@ieSU}9Ko(Z1%~KPxi;P)h*<6ay3h000O8cMeKZiV1*H)&KwiX#oHL6951J0000000000q=5hc003=ebYWy+bYU-WVRCdWFfcGMFi=YY0u%!j000080Cx^bQv-m}sSW@D01N;C02lxO00000000000HlEj0RRAPWprU=VRT_HE^uLTbS*G2FfcGKV{&6qO928D0~7!N00;ng4oXv92M1z)0RR9n0ssI=00000000000001_flC1Z0AyiwVJ~oDa&#>)FfcGMEj2bdHZ?LgWG!McW@9ZhH840WVPZEqEn;M5V>dW5H)Jp}W-VhdFfcB2Zeeh6c`k5aa&dKKbWlqH0u%!j000080Cx^bQ*g3YY!Uzf01yBG08Ib@00000000000HlF00{{SIVRT_HE^uLTbS*G2FfcGJH8wdmH8MA3En+feV=Xi_FgPt?VmCQ0Vq|7xH#jmkWH2&jEn_e+FfMa$VQ_GHE^uLTadl;ME@N_IP)h{{000001ONm8cmV(atOEc5000"
        }
      },
      "inputs": [
        {
          "name": "df",
          "node_id": "501b1b46-5dfb-4326-b0f7-114a870a567d",
          "output_name": "default"
        }
      ],
      "outputs": [
        {
          "name": "default"
        }
      ]
    },
    {
      "node_id": "9331c414-3065-4470-8184-0bb846f77ecb",
      "type": "TRANSFORM",
      "operator": "sagemaker.spark.custom_pandas_0.1",
      "parameters": {
        "code": "import pandas as pd\ndf=pd.get_dummies(df)\n"
      },
      "inputs": [
        {
          "name": "df",
          "node_id": "9277bc45-3ea7-4da8-8596-11d498a69c1d",
          "output_name": "default"
        }
      ],
      "outputs": [
        {
          "name": "default"
        }
      ]
    }
  ]
}